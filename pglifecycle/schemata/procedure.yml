---
$schema: http://json-schema.org/schema#
$id: https://pglifecycle.readthedocs.io/en/stable/schemata/procedure.html
title: Procedure
description: Defines a procedure
type: object
properties:
  schema:
    title: Schema
    description: The schema the procedure is created in
    type: string
  name:
    title: Name
    description: The procedure name
    type: string
  owner:
    title: Owner
    description: The role that owns the procedure
    type: string
  sql:
    title: SQL Statement
    description: User-provided raw SQL snippet
    type: string
  parameters:
    title: Function Parameters
    description: A dictionary of IN, OUT, BOTH, VARADIC, and TABLE args
    type: object
    properties:
      mode:
        title: Parameter Mode
        type: string
        enum: [IN, OUT, BOTH, VARADIC, TABLE]
      name:
        title: Parameter Name
        type: string
      data_type:
        title: Parameter Data Type
        type: string
      default:
        title: Default value for Paramter
        oneOf:
          - type: boolean
          - type: integer
          - type: "null"
          - type: number
          - type: string
    additionalProperties: false
    required:
      - mode
      - data_type
  language:
    title: Language
    description: |
      The name of the language that the function is implemented in. It can be
      sql, c, internal, or the name of a user-defined procedural language,
      e.g. plpgsql.
    type: string
  transform_types:
    title: Transform Types
    description: Lists which transforms a call to the function should apply.
    type: array
    items:
      type: string
  security:
    title: Security
    description: >
      INVOKER indicates that the function is to be executed with the privileges
      of the user that calls it. That is the default. DEFINER specifies that the
      function is to be executed with the privileges of the user that owns it.
    enum: [INVOKER, DEFINER]
  configuration:
    title: Configuration Parameters
    description: >
      Configuration parameters to be set to the specified value when the function
      is entered, and then restored to its prior value when the function exits.
    type: object
    propertyNames:
      pattern: ^[A-Za-z_][A-Za-z0-9_\.]*$
  definition:
    title: Function Definition
    description: >
      A string constant defining the function; the meaning depends on the language.
      It can be an internal function name, the path to an object file, an SQL
      command, or text in a procedural language.
    type: string
  object_file:
    title: Object File
    description: >
      Used for dynamically loadable C language functions when the function name
      in the C language source code is not the same as the name of the SQL
      function.
    type: string
  link_symbol:
    title: Link Symbol
    description: >
      The string link_symbol is the function's link symbol when used in conjunction
      with object_file, that is, the name of the function in the C language
      source code. If the link symbol is omitted, it is assumed to be the same
      as the name of the SQL function being defined. The C names of all functions
      must be different, so you must give overloaded C functions different C
      names (for example, use the argument types as part of the C names).
    type: string
  comment:
    title: Comment
    description: An optional comment about the procedure
    type: string
  dependencies:
    title: Dependencies
    description: Database objects this object is dependent upon
    $package_schema: dependencies
additionalProperties: false
required:
  - schema
  - name
oneOf:
  - required: [language, definition]
    not: {required: [sql, object_file, link_symbol]}
  - required: [sql]
    not:
      required:
        - language
        - transform_types
        - security
        - configuration
        - definition
        - object_file
        - link_symbol
