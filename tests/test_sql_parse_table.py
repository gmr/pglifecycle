import unittest

from pglifecycle import sql_parse


class TestCase(unittest.TestCase):

    def test_example1_films(self):
        sql = """\
            CREATE TABLE films (
                code        char(5) CONSTRAINT firstkey PRIMARY KEY,
                title       varchar(40) NOT NULL,
                did         integer NOT NULL,
                date_prod   date,
                kind        varchar(10),
                len         interval HOUR TO MINUTE);"""
        expectation = {
            'oncommit': 0,
            'relation': {
                'inh': True,
                'location': 25,
                'relname': 'films',
                'relpersistence': 'p'
            },
            'tableElts': [{
                'constraint': None,
                'default': None,
                'is_local': True,
                'name': 'code',
                'nullable': True,
                'primary_key': True,
                'type': 'char(5)'
            }, {
                'constraint': None,
                'default': None,
                'is_local': True,
                'name': 'title',
                'nullable': False,
                'primary_key': False,
                'type': 'varchar(40)'
            }, {
                'constraint': None,
                'default': None,
                'is_local': True,
                'name': 'did',
                'nullable': False,
                'primary_key': False,
                'type': 'int4'
            }, {
                'constraint': None,
                'default': None,
                'is_local': True,
                'name': 'date_prod',
                'nullable': True,
                'primary_key': False,
                'type': 'date'
            }, {
                'constraint': None,
                'default': None,
                'is_local': True,
                'name': 'kind',
                'nullable': True,
                'primary_key': False,
                'type': 'varchar(10)'
            }, {
                'constraint': None,
                'default': None,
                'is_local': True,
                'name': 'len',
                'nullable': True,
                'primary_key': False,
                'type': 'interval HOUR TO MINUTE'
            }]
        }
        self.assertDictEqual(sql_parse.parse(sql), expectation)

    def test_example1_distributors(self):
        sql = """\
            CREATE TABLE distributors (
                 did    integer PRIMARY KEY GENERATED BY DEFAULT
                    AS IDENTITY (INCREMENT BY 10),
                 name   varchar(40) NOT NULL CHECK (name <> ''));"""
        expectation = {
            'oncommit': 0,
            'relation': {
                'inh': True,
                'location': 25,
                'relname': 'distributors',
                'relpersistence': 'p'
            },
            'tableElts': [
                {
                    'constraint': {
                        'generated': 'BY DEFAULT',
                        'options': {'arg': 10, 'defname': 'increment'}
                    },
                    'default': None,
                    'is_local': True,
                    'name': 'did',
                    'nullable': True,
                    'primary_key': True,
                    'type': 'int4'
                },
                {
                    'constraint': {
                        'check': "name <> ''",
                        'initially_valid': True
                    },
                    'default': None,
                    'is_local': True,
                    'name': 'name',
                    'nullable': False,
                    'primary_key': False,
                    'type': 'varchar(40)'
                }
            ]
        }
        self.assertDictEqual(sql_parse.parse(sql), expectation)

    def test_example2_array_int(self):
        sql = """\
        CREATE TABLE array_int (
            vector  int[][],
            description  text);"""
        expectation = {
            'oncommit': 0,
            'relation': {
                'inh': True,
                'location': 21,
                'relname': 'array_int',
                'relpersistence': 'p'
            },
            'tableElts': [
                {
                    'constraint': None,
                    'default': None,
                    'is_local': True,
                    'name': 'vector',
                    'nullable': True,
                    'primary_key': False,
                    'type': 'int4[][]'
                },
                {
                    'constraint': None,
                    'default': None,
                    'is_local': True,
                    'name': 'description',
                    'nullable': True,
                    'primary_key': False,
                    'type': 'text'
                }
            ]
        }
        self.assertDictEqual(sql_parse.parse(sql), expectation)
